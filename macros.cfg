[include KAMP_Settings.cfg]
[include filament-macros.cfg]

[gcode_macro PRINT_START]
variable_printing: False
gcode:
  SET_FAN_SPEED FAN="exhaust_fan" SPEED=0  ; reset the fan speed
  UPDATE_DELAYED_GCODE ID=SEQ_PRINT_END DURATION=0 ; cancel end print seq
  M140 S{ params.BED_TEMP }

  SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=printing VALUE=False
  INITIALIZE_TOOLCHANGER

  M117 Homing
  G28
  ;{% if params.CHANGES == '0' %}
  ;  SET_GCODE_OFFSET Z=0
  ;{% endif %}
  
  SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=controller_fan TARGET=40   ; cooling controller/steppers/pi during print
  {% set CHAMBER_TEMP = params.CHAMBER_TEMP | default(0) | float %}
  M117 Waiting for chamber to heat up to { CHAMBER_TEMP }
  M104 S150
  HEAT_CHAMBER TARGET_TEMP={CHAMBER_TEMP}
  M117 Heating up the bed to { params.BED_TEMP }
  M190 S{ params.BED_TEMP }

  ; CHANGE THE LIGHTS
  SET_LED LED=chamber_lights RED=0.9 GREEN=0.9 BLUE=0.9 TRANSMIT=1
  M117 Cleaning nozzle
  ;SET_TOOL_PARAMETER PARAMETER='pid_Kp' VALUE=300
  ;SET_TOOL_PARAMETER PARAMETER='pid_Ki' VALUE=300
  ;SET_TOOL_PARAMETER PARAMETER='pid_Kd' VALUE=300
  
  M104 S150
  _PARK_CLEAN
  
  M117 Calibrating bed
  G32 ; Home, gantry tram
  TOOL_BED_MESH_CALIBRATE
  M109 S0 # Stop heat, the actual printing may happen with a different hotend.

  {% if params.CHANGES != '0' %}
    M117 Heating/priming the hotends
    # heat and prime all the hotends in use
    {% for tool_nr in printer.toolchanger.tool_numbers %}
      {% set tooltemp_param = 'T' ~ tool_nr|string ~ '_TEMP' %}
      {% if tooltemp_param in params %}
        M117 T{tool_nr} to {params[tooltemp_param]} for PRIME
        T{tool_nr} TEMP{params[tooltemp_param]} PRIME1
      {% endif %}
    {% endfor %}
  {% endif %}

  {% if params.TOOL is defined %}
    T{params.TOOL}
  {% endif %}

  _PARK_ON_COOLING_PAD
  M117 Heating T{params.TOOL} to {params.TOOL_TEMP} for printing
  M109 S{ params.TOOL_TEMP }
  
  G0 Z2 F4000 ;Move up a bit
  G92 E0 ; Zero extruder
  
  ; decide bedfan speed
  {% if CHAMBER_TEMP == 0 %}
    SET_FAN_SPEED FAN=BedFans SPEED=0.3
  {% else %}
    SET_FAN_SPEED FAN=BedFans SPEED=1.0
  {% endif %}
  
  START_TOOL_PROBE_CRASH_DETECTION
  SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=printing VALUE=True

  ; check if single toolhead print
  {% if params.CHANGES == '0' %}
    M117 Purging on bed
    ;SET_GCODE_OFFSET Z=0
    VORON_PURGE
  {% endif %}
  M117 Printing

[gcode_macro PRINT_END]
gcode:
    STOP_TOOL_PROBE_CRASH_DETECTION
    SET_GCODE_VARIABLE MACRO=PRINT_START VARIABLE=printing VALUE=False
    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    SET_FAN_SPEED FAN="exhaust_fan" SPEED=1.0  ; vent the fumes
    G1 E-20 F3600                 ; retract filament 20mm

    G91                            ; relative positioning
    #   Get Boundaries
    {% set max_x = printer.configfile.config["stepper_x"]["position_max"]|float %}
    {% set max_y = printer.configfile.config["stepper_y"]["position_max"]|float %}
    {% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}

    #   Check end position to determine safe direction to move
    {% if printer.toolhead.position.x < (max_x - 20) %}
        {% set x_safe = 20.0 %}
    {% else %}
        {% set x_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.y < (max_y - 20) %}
        {% set y_safe = 20.0 %}
    {% else %}
        {% set y_safe = -20.0 %}
    {% endif %}

    {% if printer.toolhead.position.z < (max_z - 20) %}
        {% set z_safe = 20.0 %}
    {% else %}
        {% set z_safe = max_z - printer.toolhead.position.z %}
    {% endif %}

    G0 Z{z_safe} F3600             ; move nozzle up
    G0 X{x_safe} Y{y_safe} F20000  ; move nozzle to remove stringing
    
    _PARK_CLEAN

    TURN_OFF_HEATERS
    M107                           ; turn off fan
    SET_FAN_SPEED FAN=BedFans SPEED=0
    M140 S0                           ; turn off bed
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=controller_fan TARGET=50   ; cooling controller/steppers/pi during print

    G90                            ; absolute positioning
    {% set tool = printer[printer.toolchanger.tool] %}
    G0 Z250 F3600          ; park nozzle up top (use 250 for now until tophat)
    T0
    M18                            ; Motors off
    M117 Print done

    ; CHANGE THE LIGHTS
    SET_LED LED=chamber_lights RED=0.25 GREEN=0.25 BLUE=0.25 TRANSMIT=1
    UPDATE_DELAYED_GCODE ID=SEQ_PRINT_END DURATION=900 ; run print end seq after 15 min

[gcode_macro HEAT_CHAMBER]
description: Heat the chamber to target at 110 C bed
gcode:
  {% set TARGET_TEMP = params.TARGET_TEMP | default(0) | float %}
  SET_FAN_SPEED FAN=BedFans SPEED=1.0
  M140 S110
  TEMPERATURE_WAIT SENSOR="temperature_sensor chamber" MINIMUM={TARGET_TEMP}
  SET_FAN_SPEED FAN=BedFans SPEED=0.3
  {% if TARGET_TEMP == 0 %}
    SET_FAN_SPEED FAN="exhaust_fan" SPEED=1.0
  {% else %}
    SET_FAN_SPEED FAN="exhaust_fan" SPEED=0.4
  {% endif %}

[gcode_macro G32]
gcode:
    BED_MESH_CLEAR
    QUAD_GANTRY_LEVEL
    G28 Z

[delayed_gcode SEQ_PRINT_END]
gcode:
  SET_FAN_SPEED FAN="exhaust_fan" SPEED=0  ; disable exhaust fan after done cleaning air
  TURN_OFF_LEDS

  M117 ; clear display

; =================
;     HEAT SOAK
; =================
[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    SET_FAN_SPEED FAN="exhaust_fan" SPEED=0  ; reset the fan speed
    UPDATE_DELAYED_GCODE ID=SEQ_PRINT_END DURATION=0 ; cancel end print seq
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; fire up the heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
    SET_FAN_SPEED FAN=BedFans SPEED=1.0

    ;; put the bed and nozzle where they're a safe distance apart
    G28

    #M84 ;; turn off steppers
    SET_TEMPERATURE_FAN_TARGET TEMPERATURE_FAN=controller_fan TARGET=45

    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1
    SET_FAN_SPEED FAN=BedFans SPEED=0.0

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

; ===================
;   HEAT SOAK DONE
; ===================

[gcode_macro TOOLCHANGE_DEMO]
gcode:
    {% for n in range(20) %}
      T{ printer.toolchanger.tool_numbers | random }
    {% endfor %}

[gcode_macro PRINT_STATUS]
gcode: 
  RESPOND TYPE='echo' MSG="Status for M190 {params.OBJ} is { printer[params.OBJ] }"
#python:
#  gcode.RESPOND(TYPE='echo', MSG=f"Status for M190 {params.OBJ} is { printer[params.OBJ] }")

[gcode_macro UNSAFE_LOWER]
description: Lower the bed 100mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION Z=100
  G0 Z0 F600

[gcode_macro UNSAFE_RAISE]
description: Raise the bed 100mm without homing
gcode:
  G90
  SET_KINEMATIC_POSITION X=175 Y=175 Z=0
  G0 Z100 F600

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
    # Parameters
    {% set z = params.Z|default(10)|int %}                                                   ; z hop amount

    {% if printer['pause_resume'].is_paused|int == 0 %}
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE={z}                              ; set z hop variable for reference in resume macro
        SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=etemp VALUE={printer['extruder'].target}    ; set hotend temp variable for reference in resume macro

        SAVE_GCODE_STATE NAME=PAUSE                                                          ; save current print position for resume
        BASE_PAUSE                                                                           ; pause print
        STOP_TOOL_PROBE_CRASH_DETECTION
        {% if (printer.gcode_move.position.z + z) < printer.toolhead.axis_maximum.z %}       ; check that zhop doesn't exceed z max
            G91                                                                              ; relative positioning
            G1 Z{z} F900                                                                     ; raise Z up by z hop amount
        {% else %}
            { action_respond_info("Pause zhop exceeds maximum Z height.") }                  ; if z max is exceeded, show message and set zhop value for resume to 0
            SET_GCODE_VARIABLE MACRO=RESUME VARIABLE=zhop VALUE=0
        {% endif %}
        G90                                                                                  ; absolute positioning
        _PARK_ON_COOLING_PAD 
        SAVE_GCODE_STATE NAME=PAUSEPARK                                                      ; save parked position in case toolhead is moved during the pause (otherwise the return zhop can error)
        {% set tools = printer.toolchanger.tool_names %}
        {% for tool in tools %}
          M104 T{printer[tool].tool_number} S0 ;Cooldown up the filament
        {% endfor %}                                                                             ; turn off hotend
        SET_IDLE_TIMEOUT TIMEOUT=43200                                                       ; set timeout to 12 hours
    {% endif %}

[gcode_macro RESUME]
rename_existing: BASE_RESUME
variable_zhop: 0
variable_etemp: 0
gcode:
    # Parameters
    {% set e = params.E|default(2.5)|int %}                                          ; hotend prime amount (in mm)

    {% if printer['pause_resume'].is_paused|int == 1 %}
        #INITIAL_RGB                                                                    ; reset LCD color
        SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}  ; set timeout back to configured value
        {% if etemp > 0 %}
            M109 S{etemp|int}                                                        ; wait for hotend to heat back up
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSEPARK MOVE=1 MOVE_SPEED=100                     ; go back to parked position in case toolhead was moved during pause (otherwise the return zhop can error)
        G91                                                                          ; relative positioning
        M83                                                                          ; relative extruder positioning
        {% if printer[printer.toolhead.extruder].temperature >= printer.configfile.settings.extruder.min_extrude_temp %}
            #_PARK_ON_COOLING_PAD
            #G1 E{e} F900
            #G1 Z{zhop * -1} F900                                                ; prime nozzle by E, lower Z back down
            _PARK_CLEAN
        {% else %}
            #G1 Z{zhop * -1} F900                                                     ; lower Z back down without priming (just in case we are testing the macro with cold hotend)
            _PARK_CLEAN
        {% endif %}
        RESTORE_GCODE_STATE NAME=PAUSE MOVE=1 MOVE_SPEED=120                          ; restore position
        START_TOOL_PROBE_CRASH_DETECTION
        BASE_RESUME                                                                  ; resume print
    {% endif %}

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout} ; set timeout back to configured value
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PRINT_END
    BASE_CANCEL_PRINT

[gcode_macro CENTER_TOOL]
gcode: 
  CONDHOME
  G1 Z200 F9000
  G1 X175 Y175 F18000

[gcode_macro CONDHOME]
gcode:
    {% if printer.toolhead.homed_axes != "xyz" %}
        G28
    {% endif %}

[gcode_macro _PARK_ON_COOLING_PAD]
gcode:
  SAVE_GCODE_STATE NAME=PRE
  G90 ; Absolute positioning
  ;{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  ;{% if printer.toolhead.position.z > (max_z - 60) %}
  ;  {% set z_safe = max_z - 60 %}
  ;{% else %}
  ;  {% set z_safe = printer.toolhead.position.z %}
  ;{% endif %}
  G0 X4 Y347 F18000
  G1 Z2 F6000
  RESTORE_GCODE_STATE NAME=PRE

; =================
;     NOZZLE CLEAN (after undock, on gantry)
;     params.TEMP
;     * WILL NOT TURN OFF HEAT AFTER FINISH, INSERT M104 S0 AFTERWARDS *
; =================
[gcode_macro _CLEAN_NOZZLE_GANTRY]
gcode:
  SAVE_GCODE_STATE NAME=PRE
  G90
  
  ;{% set max_z = printer.configfile.config["stepper_z"]["position_max"]|float %}
  ;{% if printer.toolhead.position.z > (max_z - 60) %}
  ;  {% set z_safe = max_z - 60 %}
  ;{% else %}
  ;  {% set z_safe = printer.toolhead.position.z %}
  ;{% endif %}
  ;G1 Z{z_safe} F4000
  G1 Z2 F6000
  G1 X4 Y347 F18000
  ; maybe move slightly lower here
  G1 X84 F18000
  G1 X119 F18000
  G1 X86 F18000
  G1 X119 F18000
  G1 X86 F18000
  G1 X119 F18000
  G1 X84 F18000
  RESTORE_GCODE_STATE NAME=PRE

[gcode_macro _PARK_CLEAN]
gcode:
  SAVE_GCODE_STATE NAME=PRE
  _PARK_ON_COOLING_PAD
  _CLEAN_NOZZLE_GANTRY
  _PARK_ON_COOLING_PAD
  RESTORE_GCODE_STATE NAME=PRE

[gcode_macro PRIME_NOZZLES]
gcode:
  {% set prime_temp = params.TEMP|default(200)|int %}
  G90
  _PARK_ON_COOLING_PAD
  M109 S{prime_temp|int}
  {% set purge_move_speed = (20.0 / 5.0) * 60 | float %}
  M104 S150
  
  G91
  G1 E20 F{purge_move_speed} ; move filament tip to nozzle
  G1 E10 F{purge_move_speed} ; purge 20mm filament
  G90
  
  _PARK_CLEAN
  
  G91
  G1 E10 F{purge_move_speed} ; purge 20mm filament
  #G1 E-5 F{purge_move_speed} ; retract 10mm for oozing
  G90

  _PARK_CLEAN

[gcode_macro TURN_OFF_LEDS]
gcode:
  SET_LED LED=chamber_lights RED=0 GREEN=0 BLUE=0 TRANSMIT=1
  SET_LED LED=chamber_lights RED=0.2 GREEN=0.2 BLUE=0.2 TRANSMIT=1
  SET_LED LED=chamber_lights RED=0 GREEN=0 BLUE=0 TRANSMIT=1
  ;SET_LED LED=fysetc_mini12864 RED=0 GREEN=0 BLUE=0 TRANSMIT=1
  SET_LED LED=T0 RED=0 GREEN=0 BLUE=0 WHITE=0 TRANSMIT=1
  SET_LED LED=T1 RED=0 GREEN=0 BLUE=0 TRANSMIT=1
  SET_LED LED=T2 RED=0 GREEN=0 BLUE=0 WHITE=0 TRANSMIT=1
  SET_LED LED=T3 RED=0 GREEN=0 BLUE=0 WHITE=0 TRANSMIT=1

[gcode_macro TURN_ON_LEDS]
gcode:
  SET_LED LED=chamber_lights RED=0.25 GREEN=0.25 BLUE=0.25 TRANSMIT=1
  SET_LED LED=fysetc_mini12864 RED=0.1 GREEN=0.1 BLUE=0.1 TRANSMIT=1
  SET_LED LED=T0 RED=0 GREEN=0 BLUE=0 WHITE=1 TRANSMIT=1
  SET_LED LED=T1 RED=1 GREEN=1 BLUE=1 TRANSMIT=1
  SET_LED LED=T2 RED=0 GREEN=0 BLUE=0 WHITE=1 TRANSMIT=1
  SET_LED LED=T3 RED=0 GREEN=0 BLUE=0 WHITE=1 TRANSMIT=1

[gcode_macro TEST_SPEED]
# Home, get position, throw around toolhead, home again.
# If MCU stepper positions (first line in GET_POSITION) are greater than a full step different (your number of microsteps), then skipping occured.
# We only measure to a full step to accomodate for endstop variance.
# Example: TEST_SPEED SPEED=300 ACCEL=5000 ITERATIONS=10

description: Test for max speed and acceleration parameters for the printer. Procedure: Home -> ReadPositionFromMCU -> MovesToolhead@Vel&Accel -> Home -> ReadPositionfromMCU

gcode:
    # Speed
    {% set speed  = params.SPEED|default(printer.configfile.settings.printer.max_velocity)|int %}
    # Iterations
    {% set iterations = params.ITERATIONS|default(5)|int %}
    # Acceleration
    {% set accel  = params.ACCEL|default(printer.configfile.settings.printer.max_accel)|int %}
    # Minimum Cruise Ratio
    {% set min_cruise_ratio = params.MIN_CRUISE_RATIO|default(0.5)|float %}
    # Bounding inset for large pattern (helps prevent slamming the toolhead into the sides after small skips, and helps to account for machines with imperfectly set dimensions)
    {% set bound = params.BOUND|default(20)|int %}
    # Size for small pattern box
    {% set smallpatternsize = SMALLPATTERNSIZE|default(20)|int %}
    
    # Large pattern
        # Max positions, inset by BOUND
        {% set x_min = printer.toolhead.axis_minimum.x + bound %}
        {% set x_max = printer.toolhead.axis_maximum.x - bound %}
        {% set y_min = printer.toolhead.axis_minimum.y + bound %}
        {% set y_max = printer.toolhead.axis_maximum.y - bound %}
    
    # Small pattern at center
        # Find X/Y center point
        {% set x_center = (printer.toolhead.axis_minimum.x|float + printer.toolhead.axis_maximum.x|float ) / 2 %}
        {% set y_center = (printer.toolhead.axis_minimum.y|float + printer.toolhead.axis_maximum.y|float ) / 2 %}
        
        # Set small pattern box around center point
        {% set x_center_min = x_center - (smallpatternsize/2) %}
        {% set x_center_max = x_center + (smallpatternsize/2) %}
        {% set y_center_min = y_center - (smallpatternsize/2) %}
        {% set y_center_max = y_center + (smallpatternsize/2) %}

    # Save current gcode state (absolute/relative, etc)
    SAVE_GCODE_STATE NAME=TEST_SPEED
    
    # Output parameters to g-code terminal
    { action_respond_info("TEST_SPEED: starting %d iterations at speed %d, accel %d" % (iterations, speed, accel)) }
    
    # Home and get position for comparison later:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28
        # QGL if not already QGLd (only if QGL section exists in config)
        {% if printer.configfile.settings.quad_gantry_level %}
            {% if printer.quad_gantry_level.applied == False %}
                QUAD_GANTRY_LEVEL
                G28 Z
            {% endif %}
        {% endif %} 
        # Move 50mm away from max position and home again (to help with hall effect endstop accuracy - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/24)
        G90
        G1 X{printer.toolhead.axis_maximum.x-50} Y{printer.toolhead.axis_maximum.y-50} F{30*60}
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 X Y
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Go to starting position
    G0 X{x_min} Y{y_min} Z{bound + 10} F{speed*60}

    # Set new limits
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} MINIMUM_CRUISE_RATIO={min_cruise_ratio}
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={speed} ACCEL={accel} ACCEL_TO_DECEL={accel / 2}
    {% endif %}

    {% for i in range(iterations) %}
        # Large pattern diagonals
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
        
        # Large pattern box
        G0 X{x_min} Y{y_min} F{speed*60}
        G0 X{x_min} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_max} F{speed*60}
        G0 X{x_max} Y{y_min} F{speed*60}
    
        # Small pattern diagonals
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
        
        # Small pattern box
        G0 X{x_center_min} Y{y_center_min} F{speed*60}
        G0 X{x_center_min} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_max} F{speed*60}
        G0 X{x_center_max} Y{y_center_min} F{speed*60}
    {% endfor %}

    # Restore max speed/accel/accel_to_decel to their configured values
    {% if printer.configfile.settings.printer.minimum_cruise_ratio is defined %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} MINIMUM_CRUISE_RATIO={printer.configfile.settings.printer.minimum_cruise_ratio} 
    {% else %}
        SET_VELOCITY_LIMIT VELOCITY={printer.configfile.settings.printer.max_velocity} ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel}
    {% endif %}

    # Re-home and get position again for comparison:
        M400 # Finish moves - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/66
        G28 # This is a full G28 to fix an issue with CoreXZ - https://github.com/AndrewEllis93/Print-Tuning-Guide/issues/12
        # Go to XY home positions (in case your homing override leaves it elsewhere)
        G90
        G0 X{printer.toolhead.axis_maximum.x-1} Y{printer.toolhead.axis_maximum.y-1} F{30*60}
        G4 P1000 
        GET_POSITION

    # Restore previous gcode state (absolute/relative, etc)
    RESTORE_GCODE_STATE NAME=TEST_SPEED
    

[gcode_macro _TAP_PROBE_ACTIVATE]
description: Ensure safe temp for bed probing
gcode:
    {% set max_temp = 150 %}
    {% set actual_temp = printer[params.HEATER].temperature %}
    {% set target_temp = printer[params.HEATER].target %}
    {% if target_temp > max_temp %}
        { action_respond_info('Extruder temperature target of %.1fC is too high, lowering to %.1fC' % (target_temp, max_temp)) }
        SET_HEATER_TEMPERATURE HEATER={params.HEATER} TARGET={ max_temp|int - 5 }
    {% endif %}
    # Temperature target is already low enough, but nozzle may still be too hot.
    {% if actual_temp > max_temp  + 2 %}
        { action_respond_info('Extruder temperature %.1fC is still too high, waiting until below %.1fC' % (actual_temp, max_temp)) }
        TEMPERATURE_WAIT SENSOR={params.HEATER} MAXIMUM={ max_temp }
    {% endif %}